package com.drpradeepepi.mchtrackingapp.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.drpradeepepi.mchtrackingapp.data.entity.FollowUpEntity
import com.drpradeepepi.mchtrackingapp.data.repository.FollowUpRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class FollowUpViewModel(private val repository: FollowUpRepository) : ViewModel() {
    private val _followUpList = MutableStateFlow<List<FollowUpEntity>>(emptyList())
    val followUpList: StateFlow<List<FollowUpEntity>> = _followUpList.asStateFlow()

    private val _selectedFollowUp = MutableStateFlow<FollowUpEntity?>(null)
    val selectedFollowUp: StateFlow<FollowUpEntity?> = _selectedFollowUp.asStateFlow()

    fun loadFollowUpsByMother(motherName: String) {
        viewModelScope.launch {
            repository.getFollowUpsByMother(motherName).collect {
                _followUpList.value = it
            }
        }
    }

    fun loadFollowUpById(id: Int) {
        viewModelScope.launch {
            _selectedFollowUp.value = repository.getFollowUpById(id)
        }
    }

    fun addFollowUp(
        motherName: String,
        date: String,
        gestationalAge: Int,
        weight: String,
        bloodPressure: String,
        hemoglobin: String,
        complaints: String,
        examination: String,
        advice: String,
        nextVisit: String
    ) {
        viewModelScope.launch {
            val followUp = FollowUpEntity(
                id = 0, // Auto-generated by Room
                motherName = motherName,
                date = date,
                gestationalAge = gestationalAge,
                weight = weight,
                bloodPressure = bloodPressure,
                hemoglobin = hemoglobin,
                complaints = complaints,
                examination = examination,
                advice = advice,
                nextVisit = nextVisit
            )
            repository.insertFollowUp(followUp)
        }
    }

    fun updateFollowUp(
        id: Int,
        motherName: String,
        date: String,
        gestationalAge: Int,
        weight: String,
        bloodPressure: String,
        hemoglobin: String,
        complaints: String,
        examination: String,
        advice: String,
        nextVisit: String
    ) {
        viewModelScope.launch {
            val followUp = FollowUpEntity(
                id = id,
                motherName = motherName,
                date = date,
                gestationalAge = gestationalAge,
                weight = weight,
                bloodPressure = bloodPressure,
                hemoglobin = hemoglobin,
                complaints = complaints,
                examination = examination,
                advice = advice,
                nextVisit = nextVisit
            )
            repository.updateFollowUp(followUp)
        }
    }

    fun insertFollowUp(followUp: FollowUpEntity) {
        viewModelScope.launch {
            repository.insertFollowUp(followUp)
        }
    }

    fun updateFollowUp(followUp: FollowUpEntity) {
        viewModelScope.launch {
            repository.updateFollowUp(followUp)
        }
    }

    fun deleteFollowUp(followUp: FollowUpEntity) {
        viewModelScope.launch {
            repository.deleteFollowUp(followUp)
        }
    }

    suspend fun getFollowUpById(id: Int): FollowUpEntity? {
        return repository.getFollowUpById(id)
    }
}